%% McBride
@book{hutton2016programming,
  title={Programming in Haskell},
  author={Hutton, Graham},
  year={2016},
  publisher={Cambridge University Press}
}

@inproceedings{McBride:2008:CLM:1328438.1328474,
 author = {McBride, Conor},
 title = {Clowns to the Left of Me, Jokers to the Right (Pearl): Dissecting Data Structures},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {287--295},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1328438.1328474},
 doi = {10.1145/1328438.1328474},
 acmid = {1328474},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype, differentiation, dissection, division, generic programming, iteration, polynomial, stack, tail recursion, traversal, zipper},
}

@misc{marlow2004glasgow,
    title={The glasgow haskell compiler},
      author={Marlow, Simon and Jones, Simon Peyton and others},
        year={2004}
}
@inproceedings{wadler1987projections,
    title={Projections for strictness analysis},
      author={Wadler, Philip and Hughes, R John M},
        booktitle={Conference on Functional Programming Languages and Computer
          Architecture},
          pages={385--407},
            year={1987},
              organization={Springer}
} 

@article{Danvy_2004, 
  title={Sur un Exemple de Patrick Greussay}, 
  volume={11}, 
  url={https://tidsskrift.dk/brics/article/view/21866}, 
  DOI={10.7146/brics.v11i41.21866}, 
  number={41}, 
  journal={BRICS Report Series}, 
  author={Danvy, Olivier}, 
  year={2004}, 
  month={Dec.}
}

@inproceedings{wadler1998marriage,
      title={The marriage of effects and monads},
      author={Wadler, Philip},
      booktitle={ACM SIGPLAN Notices},
      volume={34},
      number={1},
      pages={63--74},
      year={1998},
      organization={ACM}
}
@inproceedings{meijer1991functional,
     title={Functional programming with bananas, lenses, envelopes and barbed
      wire},
     author={Meijer, Erik and Fokkinga, Maarten and Paterson, Ross},
     booktitle={Conference on Functional Programming Languages and Computer
            Architecture},
     pages={124--144},
     year={1991},
     organization={Springer}
}

@article{danvy2004refocusing,
  title={Refocusing in reduction semantics},
  author={Danvy, Olivier and Nielsen, Lasse R},
  journal={BRICS Report Series},
  volume={11},
  number={26},
  year={2004}
}
@inproceedings{Steele:1977:DLP:800179.810196,
   author = {Steele,Jr., Guy Lewis},
    title = {Debunking the \&Ldquo;Expensive Procedure Call\&Rdquo; Myth or,
      Procedure Call Implementations Considered Harmful or, LAMBDA: The Ultimate
        GOTO},
     booktitle = {Proceedings of the 1977 Annual Conference},
      series = {ACM '77},
       year = {1977},
        isbn = {978-1-4503-3921-6},
         location = {Seattle, Washington},
          pages = {153--162},
           numpages = {10},
            url = {http://doi.acm.org/10.1145/800179.810196},
             doi = {10.1145/800179.810196},
              acmid = {810196},
               publisher = {ACM},
                address = {New York, NY, USA},
} 

@inproceedings{McBride:2014:KYN:2628136.2628163,
 author = {McBride, Conor Thomas},
 title = {How to Keep Your Neighbours in Order},
 booktitle = {Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '14},
 year = {2014},
 isbn = {978-1-4503-2873-9},
 location = {Gothenburg, Sweden},
 pages = {297--309},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2628136.2628163},
 doi = {10.1145/2628136.2628163},
 acmid = {2628163},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {agda, balancing, dependent types, ordering, sorting},
}

@MISC{Mcbride01thederivative,
    author = {Conor Mcbride},
    title = {The Derivative of a Regular Type is its Type of One-Hole Contexts (Extended Abstract)},
    year = {2001}
}

@inproceedings{Morris2004ExploringTR,
    title={Exploring the Regular Tree Types},
      author={Peter Morris and Thorsten Altenkirch and Conor McBride},
        booktitle={TYPES},
          year={2004}
}

%% Huet

@ARTICLE{Huet97thezipper,
  author = {Gérard Huet and Inria Rocquencourt France},
  title = {The zipper},
  journal = {JFP},
  year = {1997}
}

%% Wouter

@Inproceedings{EPTCS76.10,
  author    = {Swierstra, Wouter},
  year      = {2012},
  title     = {From Mathematics to Abstract Machine: A formal derivation of an executable Krivine machine},
  editor    = {Chapman, James and Levy, Paul Blain},
  booktitle = {{\rm Proceedings Fourth Workshop on}
               Mathematically Structured Functional Programming,
               {\rm Tallinn, Estonia, 25 March 2012}},
  series    = {Electronic Proceedings in Theoretical Computer Science},
  volume    = {76},
  publisher = {Open Publishing Association},
  pages     = {163-177},
  doi       = {10.4204/EPTCS.76.10},
}

%% Bove-Capretta

@Inbook{Bove2001,
  author="Bove, Ana
  and Capretta, Venanzio",
  editor="Boulton, Richard J.
  and Jackson, Paul B.",
  title="Nested General Recursion and Partiality in Type Theory",
  bookTitle="Theorem Proving in Higher Order Logics: 14th International Conference, TPHOLs 2001 Edinburgh, Scotland, UK, September 3--6, 2001 Proceedings",
  year="2001",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="121--125",
  abstract="We extend Bove's technique for formalising simple general recursive algrithms in constructive type theory to nested recursive algorithms. The method consists in defining an inductive special-purpose accessibility predicate, that characterizes the inputs on which the algorithm terminates. As a result, the type-theoretic version of the algorithm can be defined by structural recursion on the proof that the input values satisfy this predicate. This technique results in definitions in which the computational and logical parts are clearly separated; hence, the type-theoretic version of the algorithm is given by its purely functional content, similarly to the corresponding program in a functional programming language. In the case of nested recursion, the special predicate and the type-theoretic algorithm must be defined simultaneously, because they depend on each other. This kind of definitions is not allowed in ordinary type theory, but it is provided in type theories extended with Dybjer's schema for simultaneous inductive-recursive definitions. The technique applies also to the formalisation of partial functions as proper type-theoretic functions, rather than relations representing their graphs.",
  isbn="978-3-540-44755-9",
  doi="10.1007/3-540-44755-5_10",
  url="https://doi.org/10.1007/3-540-44755-5_10"
}

%% Gibbons
@Inbook{Gibbons2007,
  author="Gibbons, Jeremy",
  editor="Backhouse, Roland
  and Gibbons, Jeremy
  and Hinze, Ralf
  and Jeuring, Johan",
  title="Datatype-Generic Programming",
  bookTitle="Datatype-Generic Programming: International Spring School, SSDGP 2006, Nottingham, UK, April 24--27, 2006, Revised Lectures",
  year="2007",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="1--71",
  abstract="Generic programming aims to increase the flexibility of programming languages, by expanding the possibilities for parametrization --- ideally, without also expanding the possibilities for uncaught errors. The term means different things to different people: parametric polymorphism, data abstraction, meta-programming, and so on. We use it to mean polytypism, that is, parametrization by the shape of data structures rather than their contents. To avoid confusion with other uses, we have coined the qualified term datatype-generic programming for this purpose. In these lecture notes, we expand on the definition of datatype-generic programming, and present some examples of datatype-generic programs. We also explore the connection with design patterns in object-oriented programming; in particular, we argue that certain design patterns are just higher-order datatype-generic programs.",
  isbn="978-3-540-76786-2",
  doi="10.1007/978-3-540-76786-2_1",
  url="https://doi.org/10.1007/978-3-540-76786-2_1"
}

@book{BirddeMoor96:Algebra,
  title = "The Algebra of Programming",
  author = "Richard Bird and Oege de Moor",
  year = {1996},
  isbn = "013507245X",
  publisher = "Prentice-Hall",
  url = "http://www.cs.ox.ac.uk/publications/books/algebra/",
}

@article{genericindex,
author = {Löh, Andres and Magalhães, José Pedro},
year = {2011},
month = {09},
pages = {},
title = {Generic Programming with Indexed Functors},
booktitle = {WGP'11 - Proceedings of the 2011 ACM SIGPLAN Workshop on Generic Programming}
}

@INPROCEEDINGS{Meijer91functionalprogramming,
      author = {Erik Meijer and Maarten Fokkinga and Ross Paterson},
      title = {Functional Programming with Bananas, Lenses, Envelopes and
            Barbed Wire},
      booktitle = {},
      year = {1991},
                      pages = {124--144},
                          publisher = {Springer-Verlag}
}
@Inbook{Danvy2009,
  author="Danvy, Olivier",
  editor="Koopman, Pieter
    and Plasmeijer, Rinus
    and Swierstra, Doaitse",
  title="From Reduction-Based to Reduction-Free Normalization",
  bookTitle="Advanced Functional Programming: 6th International School, AFP
    2008, Heijen, The Netherlands, May 2008, Revised Lectures",
  year="2009",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="66--164",
  abstract="We document an operational method to construct reduction-free
    normalization functions. Starting from a reduction-based normalization
    function from a reduction semantics, i.e., the iteration of a one-step
    reduction function, we successively subject it to refocusing (i.e.,
        deforestation of the intermediate successive terms in the reduction
        sequence), equational simplification, refunctionalization (i.e., the
          converse of defunctionalization), and direct-style transformation
        (i.e., the converse of the CPS transformation), ending with a
        reduction-free normalization function of the kind usually crafted by
        hand. We treat in detail four simple examples: calculating arithmetic
        expressions, recognizing Dyck words, normalizing lambda-terms with
        explicit substitutions and call/cc, and flattening binary trees.",
  isbn="978-3-642-04652-0",
  doi="10.1007/978-3-642-04652-0_3",
  url="https://doi.org/10.1007/978-3-642-04652-0_3"
}

@MISC{Abel98foetus,
      author = {Andreas Abel},
      title = {foetus – Termination Checker for Simple Functional Programs},
      year = {1998}
}

@article{abel2010miniagda,
  title={MiniAgda: Integrating sized and dependent types},
  author={Abel, Andreas},
  journal={arXiv preprint arXiv:1012.4896},
  year={2010}
}
@article{nordstrom1988terminating,
  title={Terminating general recursion},
  author={Nordstr{\"o}m, Bengt},
  journal={BIT Numerical Mathematics},
  volume={28},
  number={3},
  pages={605--619},
  year={1988},
  publisher={Springer}
}

% Hutton

@ARTICLE{Hutton93atutorial,
    author = {Graham Hutton},
    title = {A Tutorial on the Universality and Expressiveness of Fold},
    journal = {Journal of Functional Programming},
    year = {1993},
    volume = {9},
    pages = {355--372}
}


@incollection{altenkirch-mcbride,
  title={Generic programming within dependently typed programming},
  author={Altenkirch, Thorsten and McBride, Conor},
  booktitle={Generic Programming},
  pages={1--20},
  year={2003},
  publisher={Springer}
}

@book{martinloef,
  title={Intuitionistic type theory},
  author={Martin-L{\"o}f, Per},
  volume={9},
  year={1984},
  publisher={Bibliopolis Napoli}
}


@inproceedings{wadler1989make,
  title={How to make ad-hoc polymorphism less ad hoc},
  author={Wadler, Philip and Blott, Stephen},
  booktitle={Proceedings of the 16th ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={60--76},
  year={1989},
  organization={ACM}
}

@inproceedings{meijer1995space,
  title={Bananas in space: Extending fold and unfold to exponential types},
  author={Meijer, Erik and Hutton, Graham},
  booktitle={Proceedings of the seventh international conference on Functional programming languages and computer architecture},
  pages={324--333},
  year={1995},
  organization={ACM}
}

@inproceedings{chakravarty2005associated,
    title={Associated type synonyms},
      author={Chakravarty, Manuel MT and Keller, Gabriele and Jones, Simon
        Peyton},
        booktitle={ACM SIGPLAN Notices},
          volume={40},
            number={9},
              pages={241--253},
                year={2005},
                  organization={ACM}
}

@inproceedings{noort-regular,
 author = {Noort, Thomas van and Rodriguez, Alexey and Holdermans, Stefan and Jeuring, Johan and Heeren, Bastiaan},
 title = {A Lightweight Approach to Datatype-generic Rewriting},
 booktitle = {Proceedings of the ACM SIGPLAN Workshop on Generic Programming},
 series = {WGP '08},
 year = {2008},
 isbn = {978-1-60558-060-9},
 location = {Victoria, BC, Canada},
 pages = {13--24},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1411318.1411321},
 doi = {10.1145/1411318.1411321},
 acmid = {1411321},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype-generic programming, term rewriting},
} 

@article{hudak1992report,
  title={Report on the programming language Haskell: a non-strict, purely functional language version 1.2},
  author={Hudak, Paul and Peyton Jones, Simon and Wadler, Philip and Boutel, Brian and Fairbairn, Jon and Fasel, Joseph and Guzm{\'a}n, Mar{\'\i}a M and Hammond, Kevin and Hughes, John and Johnsson, Thomas and others},
  journal={ACM SigPlan notices},
  volume={27},
  number={5},
  pages={1--164},
  year={1992},
  publisher={ACM}
}

@InProceedings{10.1007/978-3-540-76786-2_1,
author="Gibbons, Jeremy",
editor="Backhouse, Roland
and Gibbons, Jeremy
and Hinze, Ralf
and Jeuring, Johan",
title="Datatype-Generic Programming",
booktitle="Datatype-Generic Programming",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="1--71",
abstract="Generic programming aims to increase the flexibility of programming languages, by expanding the possibilities for parametrization --- ideally, without also expanding the possibilities for uncaught errors. The term means different things to different people: parametric polymorphism, data abstraction, meta-programming, and so on. We use it to mean polytypism, that is, parametrization by the shape of data structures rather than their contents. To avoid confusion with other uses, we have coined the qualified term datatype-generic programming for this purpose. In these lecture notes, we expand on the definition of datatype-generic programming, and present some examples of datatype-generic programs. We also explore the connection with design patterns in object-oriented programming; in particular, we argue that certain design patterns are just higher-order datatype-generic programs.",
isbn="978-3-540-76786-2"
}


@inproceedings{danvy2008reduction,
  title={From reduction-based to reduction-free normalization},
  author={Danvy, Olivier},
  booktitle={International School on Advanced Functional Programming},
  pages={66--164},
  year={2008},
  organization={Springer}
}

@inproceedings{Ager:2003:FCE:888251.888254,
 author = {Ager, Mads Sig and Biernacki, Dariusz and Danvy, Olivier and Midtgaard, Jan},
 title = {A Functional Correspondence Between Evaluators and Abstract Machines},
 booktitle = {Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming},
 series = {PPDP '03},
 year = {2003},
 isbn = {1-58113-705-2},
 location = {Uppsala, Sweden},
 pages = {8--19},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/888251.888254},
 doi = {10.1145/888251.888254},
 acmid = {888254},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {abstract machines, closure conversion, defunctionalization, interpreters, transformation into continuation-passing style (CPS)},
} 

[download] 

@article{swierstra2012mathematics,
    title={From mathematics to abstract machine: a formal derivation of an
      executable Krivine machine},
      author={Swierstra, Wouter},
        journal={arXiv preprint arXiv:1202.2924},
          year={2012}
}
@inproceedings{wadler1987views,
    title={Views: A way for pattern matching to cohabit with data abstraction},
      author={Wadler, Philip},
        booktitle={Proceedings of the 14th ACM SIGACT-SIGPLAN symposium on
          Principles of programming languages},
          pages={307--313},
            year={1987},
              organization={ACM}
}
@article{mcbride2004view,
  title={The view from the left},
  author={McBride, Conor and McKinna, James},
  journal={Journal of functional programming},
  volume={14},
  number={1},
  pages={69--111},
  year={2004},
  publisher={Cambridge University Press}
}
@inproceedings{dissection,
 author = {McBride, Conor},
 title = {Clowns to the Left of Me, Jokers to the Right (Pearl): Dissecting Data Structures},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {287--295},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1328438.1328474},
 doi = {10.1145/1328438.1328474},
 acmid = {1328474},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype, differentiation, dissection, division, generic programming, iteration, polynomial, stack, tail recursion, traversal, zipper},
}



@phdthesis{norell,
  title={Towards a practical programming language based on dependent type theory},
  author={Norell, Ulf},
  school={Chalmers University of Technology},
  year=2007
}

@article{huet,
  title={The zipper},
  author={Huet, G{\'e}rard},
  journal={Journal of functional programming},
  volume={7},
  number={5},
  pages={549--554},
  year={1997},
  publisher={Cambridge University Press}
}

@inproceedings{norell-notes,
  title={Dependently typed programming in Agda},
  author={Norell, Ulf},
  booktitle={International School on Advanced Functional Programming},
  pages={230--266},
  year={2008},
  organization={Springer}
}


@book{martin-loef,
  title={Intuitionistic type theory},
  author={Martin-L{\"o}f, Per},
  volume={9},
  year={1984},
  publisher={Bibliopolis Napoli}
}


@inproceedings{morris-regular,
  author = "Peter Morris and Thorsten Altenkirch and Conor McBride",
  title = "Exploring the Regular Tree Types",
  booktitle = "Types for Proofs and Programs ({TYPES} 2004)",
  editor = "Jean-Christophe Filliatre, Christine Paulin-Mohring and Benjamin Werner",
  series = "Lecture Notes in Computer Science",
  year = 2006
}


@article{indexed-containers,
  title={Indexed containers},
  author={Altenkirch, Thorsten and Ghani, Neil and Hancock, Peter and McBride, Conor and Morris, Peter},
  journal={Journal of Functional Programming},
  volume={25},
  year={2015},
  publisher={Cambridge University Press}
}

@article{containers,
  title={Containers: constructing strictly positive types},
  author={Abbott, Michael and Altenkirch, Thorsten and Ghani, Neil},
  journal={Theoretical Computer Science},
  volume={342},
  number={1},
  pages={3--27},
  year={2005},
  publisher={Elsevier}
}

@inproceedings{levitation,
 author = {Chapman, James and Dagand, Pierre-\'{E}variste and McBride, Conor and Morris, Peter},
 title = {The Gentle Art of Levitation},
 booktitle = {Proceedings of the 15th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '10},
 year = {2010},
 isbn = {978-1-60558-794-3},
 location = {Baltimore, Maryland, USA},
 pages = {3--14},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1863543.1863547},
 doi = {10.1145/1863543.1863547},
 acmid = {1863547},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {data structure, metaprogramming, monads, proof assistants, type systems},
} 


@inproceedings{danvy-I,
 author = {Ager, Mads Sig and Biernacki, Dariusz and Danvy, Olivier and Midtgaard, Jan},
 title = {A Functional Correspondence Between Evaluators and Abstract Machines},
 booktitle = {Proceedings of the 5th ACM SIGPLAN International Conference on Principles and Practice of Declaritive Programming},
 series = {PPDP '03},
 year = {2003},
 isbn = {1-58113-705-2},
 location = {Uppsala, Sweden},
 pages = {8--19},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/888251.888254},
 doi = {10.1145/888251.888254},
 acmid = {888254},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {abstract machines, closure conversion, defunctionalization, interpreters, transformation into continuation-passing style (CPS)},
} 

@Inbook{danvy-II,
author="Danvy, Olivier",
editor="Koopman, Pieter
and Plasmeijer, Rinus
and Swierstra, Doaitse",
title="From Reduction-Based to Reduction-Free Normalization",
bookTitle="Advanced Functional Programming: 6th International School, AFP 2008, Heijen, The Netherlands, May 2008, Revised Lectures",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="66--164",
isbn="978-3-642-04652-0",
doi="10.1007/978-3-642-04652-0_3",
url="https://doi.org/10.1007/978-3-642-04652-0_3"
}

@inproceedings{krivine,
  author    = {Wouter Swierstra},
  title     = {From Mathematics to Abstract Machine: {A} formal derivation of an
               executable Krivine machine},
  booktitle = {Proceedings Fourth Workshop on Mathematically Structured Functional
               Programming, MSFP@ETAPS 2012, Tallinn, Estonia, 25 March 2012.},
  pages     = {163--177},
  year      = {2012},
  crossref  = {DBLP:journals/corr/abs-1202-2407},
  url       = {https://doi.org/10.4204/EPTCS.76.10},
  doi       = {10.4204/EPTCS.76.10},
  timestamp = {Wed, 03 May 2017 14:47:54 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1202-2924},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{power-of-pi,
 author = {Oury, Nicolas and Swierstra, Wouter},
 title = {The Power of Pi},
 booktitle = {Proceedings of the 13th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '08},
 year = {2008},
 isbn = {978-1-59593-919-7},
 location = {Victoria, BC, Canada},
 pages = {39--50},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1411204.1411213},
 doi = {10.1145/1411204.1411213},
 acmid = {1411213},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependent types, domain-specific embedded languages},
} 

@article{landin,
  title={The mechanical evaluation of expressions},
  author={Landin, Peter J},
  journal={The Computer Journal},
  volume={6},
  number={4},
  pages={308--320},
  year={1964},
  publisher={The British Computer Society}
}


@Article{dybjer-inductive,
author="Dybjer, Peter",
title="Inductive families",
journal="Formal Aspects of Computing",
year="1994",
month="Jul",
day="01",
volume="6",
number="4",
pages="440--465",
abstract="A general formulation of inductive and recursive definitions in Martin-L{\"o}f's type theory is presented. It extends Backhouse's `Do-It-Yourself Type Theory' to include inductive definitions of families of sets and definitions of functions by recursion on the way elements of such sets are generated. The formulation is in natural deduction and is intended to be a natural generalisation to type theory of Martin-L{\"o}f's theory of iterated inductive definitions in predicate logic.",
issn="1433-299X",
doi="10.1007/BF01211308",
url="https://doi.org/10.1007/BF01211308"
}

@InProceedings{induction-recursion,
author="Dybjer, Peter
and Setzer, Anton",
editor="Girard, Jean-Yves",
title="A Finite Axiomatization of Inductive-Recursive Definitions",
booktitle="Typed Lambda Calculi and Applications",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="129--146",
abstract="Induction-recursion is a schema which formalizes the principles for introducing new sets in Martin-L{\"o}f 's type theory. It states that we may inductively define a set while simultaneously defining a function from this set into an arbitrary type by structural recursion. This extends the notion of an inductively defined set substantially and allows us to introduce universes and higher order universes (but not a Mahlo universe). In this article we give a finite axiomatization of inductive-recursive definitions. We prove consistency by constructing a set-theoretic model which makes use of one Mahlo cardinal.",
isbn="978-3-540-48959-7"
}

@online{agdastdlib,
  author = {Agda},
  title = {standard library}, 
  url = {https://github.com/agda/agda-stdlib},
  accessed = {2018-07-09}}


@article{krivine2007call,
  title={A call-by-name lambda-calculus machine},
  author={Krivine, Jean-Louis},
  journal={Higher-order and symbolic computation},
  volume={20},
  number={3},
  pages={199--207},
  year={2007},
  publisher={Springer}
}
@inproceedings{meijer1995bananas,
    title={Bananas in space: Extending fold and unfold to exponential types},
      author={Meijer, Erik and Hutton, Graham},
        booktitle={Proceedings of the seventh international conference on
          Functional programming languages and computer architecture},
          pages={324--333},
            year={1995},
              organization={ACM}
}

@inproceedings{nested,
  title={Nested datatypes},
  author={Bird, Richard and Meertens, Lambert},
  booktitle={International Conference on Mathematics of Program Construction},
  pages={52--67},
  year={1998},
  organization={Springer}
}

 [download]

@inproceedings{mutual,
 author = {Yakushev, Alexey Rodriguez and Holdermans, Stefan and L\"{o}h, Andres and Jeuring, Johan},
 title = {Generic Programming with Fixed Points for Mutually Recursive Datatypes},
 booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '09},
 year = {2009},
 isbn = {978-1-60558-332-7},
 location = {Edinburgh, Scotland},
 pages = {233--244},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/1596550.1596585},
 doi = {10.1145/1596550.1596585},
 acmid = {1596585},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype-generic programming, fixed points, haskell, mutually recursive datatypes},
} 


@InCollection{morris,
  author = 	 {Thorsten Altenkirch and Conor Mcbride and Peter Morris},
  title = 	 {Generic Programming with Dependent Types},
  booktitle = 	 {Spring School on Datatype-Generic Programming},
  OPTpages = 	 {},
  publisher = {Springer-Verlag},
  year =	 {2007},
  editor = {Roland Backhouse and Jeremy Gibbons and Ralf Hinze and Johan Jeuring},
  volume =	 {4719},
  series =	 {LNCS},
}

@inproceedings{partiality,
 author = {Danielsson, Nils Anders},
 title = {Operational Semantics Using the Partiality Monad},
 booktitle = {Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '12},
 year = {2012},
 isbn = {978-1-4503-1054-3},
 location = {Copenhagen, Denmark},
 pages = {127--138},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2364527.2364546},
 doi = {10.1145/2364527.2364546},
 acmid = {2364546},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependent types, mixed induction and coinduction, partiality monad},
} 


@inproceedings{nakata,
  title={Trace-based coinductive operational semantics for while},
  author={Nakata, Keiko and Uustalu, Tarmo},
  booktitle={International Conference on Theorem Proving in Higher Order Logics},
  pages={375--390},
  year={2009},
  organization={Springer}
}


@article{bove,
  title={Modelling general recursion in type theory},
  author={Bove, Ana and Capretta, Venanzio},
  journal={Mathematical Structures in Computer Science},
  volume={15},
  number={4},
  pages={671--708},
  year={2005},
  publisher={Cambridge University Press}
}
