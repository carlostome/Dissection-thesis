%% McBride

@inproceedings{McBride:2008:CLM:1328438.1328474,
 author = {McBride, Conor},
 title = {Clowns to the Left of Me, Jokers to the Right (Pearl): Dissecting Data Structures},
 booktitle = {Proceedings of the 35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '08},
 year = {2008},
 isbn = {978-1-59593-689-9},
 location = {San Francisco, California, USA},
 pages = {287--295},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/1328438.1328474},
 doi = {10.1145/1328438.1328474},
 acmid = {1328474},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype, differentiation, dissection, division, generic programming, iteration, polynomial, stack, tail recursion, traversal, zipper},
}

@inproceedings{McBride:2014:KYN:2628136.2628163,
 author = {McBride, Conor Thomas},
 title = {How to Keep Your Neighbours in Order},
 booktitle = {Proceedings of the 19th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '14},
 year = {2014},
 isbn = {978-1-4503-2873-9},
 location = {Gothenburg, Sweden},
 pages = {297--309},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2628136.2628163},
 doi = {10.1145/2628136.2628163},
 acmid = {2628163},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {agda, balancing, dependent types, ordering, sorting},
}

@MISC{Mcbride01thederivative,
    author = {Conor Mcbride},
    title = {The Derivative of a Regular Type is its Type of One-Hole Contexts (Extended Abstract)},
    year = {2001}
}

%% Huet

@ARTICLE{Huet97thezipper,
  author = {Gérard Huet and Inria Rocquencourt France},
  title = {The zipper},
  journal = {JFP},
  year = {1997}
}

%% Wouter

@Inproceedings{EPTCS76.10,
  author    = {Swierstra, Wouter},
  year      = {2012},
  title     = {From Mathematics to Abstract Machine: A formal derivation of an executable Krivine machine},
  editor    = {Chapman, James and Levy, Paul Blain},
  booktitle = {{\rm Proceedings Fourth Workshop on}
               Mathematically Structured Functional Programming,
               {\rm Tallinn, Estonia, 25 March 2012}},
  series    = {Electronic Proceedings in Theoretical Computer Science},
  volume    = {76},
  publisher = {Open Publishing Association},
  pages     = {163-177},
  doi       = {10.4204/EPTCS.76.10},
}

%% Bove-Capretta

@Inbook{Bove2001,
  author="Bove, Ana
  and Capretta, Venanzio",
  editor="Boulton, Richard J.
  and Jackson, Paul B.",
  title="Nested General Recursion and Partiality in Type Theory",
  bookTitle="Theorem Proving in Higher Order Logics: 14th International Conference, TPHOLs 2001 Edinburgh, Scotland, UK, September 3--6, 2001 Proceedings",
  year="2001",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="121--125",
  abstract="We extend Bove's technique for formalising simple general recursive algrithms in constructive type theory to nested recursive algorithms. The method consists in defining an inductive special-purpose accessibility predicate, that characterizes the inputs on which the algorithm terminates. As a result, the type-theoretic version of the algorithm can be defined by structural recursion on the proof that the input values satisfy this predicate. This technique results in definitions in which the computational and logical parts are clearly separated; hence, the type-theoretic version of the algorithm is given by its purely functional content, similarly to the corresponding program in a functional programming language. In the case of nested recursion, the special predicate and the type-theoretic algorithm must be defined simultaneously, because they depend on each other. This kind of definitions is not allowed in ordinary type theory, but it is provided in type theories extended with Dybjer's schema for simultaneous inductive-recursive definitions. The technique applies also to the formalisation of partial functions as proper type-theoretic functions, rather than relations representing their graphs.",
  isbn="978-3-540-44755-9",
  doi="10.1007/3-540-44755-5_10",
  url="https://doi.org/10.1007/3-540-44755-5_10"
}

%% Gibbons
@Inbook{Gibbons2007,
  author="Gibbons, Jeremy",
  editor="Backhouse, Roland
  and Gibbons, Jeremy
  and Hinze, Ralf
  and Jeuring, Johan",
  title="Datatype-Generic Programming",
  bookTitle="Datatype-Generic Programming: International Spring School, SSDGP 2006, Nottingham, UK, April 24--27, 2006, Revised Lectures",
  year="2007",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="1--71",
  abstract="Generic programming aims to increase the flexibility of programming languages, by expanding the possibilities for parametrization --- ideally, without also expanding the possibilities for uncaught errors. The term means different things to different people: parametric polymorphism, data abstraction, meta-programming, and so on. We use it to mean polytypism, that is, parametrization by the shape of data structures rather than their contents. To avoid confusion with other uses, we have coined the qualified term datatype-generic programming for this purpose. In these lecture notes, we expand on the definition of datatype-generic programming, and present some examples of datatype-generic programs. We also explore the connection with design patterns in object-oriented programming; in particular, we argue that certain design patterns are just higher-order datatype-generic programs.",
  isbn="978-3-540-76786-2",
  doi="10.1007/978-3-540-76786-2_1",
  url="https://doi.org/10.1007/978-3-540-76786-2_1"
}

@book{BirddeMoor96:Algebra,
  title = "The Algebra of Programming",
  author = "Richard Bird and Oege de Moor",
  year = "1996",
  isbn = "013507245X",
  publisher = "Prentice-Hall",
  url = "http://www.cs.ox.ac.uk/publications/books/algebra/",
}

@Inbook{Danvy2009,
  author="Danvy, Olivier",
  editor="Koopman, Pieter
    and Plasmeijer, Rinus
    and Swierstra, Doaitse",
  title="From Reduction-Based to Reduction-Free Normalization",
  bookTitle="Advanced Functional Programming: 6th International School, AFP
    2008, Heijen, The Netherlands, May 2008, Revised Lectures",
  year="2009",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="66--164",
  abstract="We document an operational method to construct reduction-free
    normalization functions. Starting from a reduction-based normalization
    function from a reduction semantics, i.e., the iteration of a one-step
    reduction function, we successively subject it to refocusing (i.e.,
        deforestation of the intermediate successive terms in the reduction
        sequence), equational simplification, refunctionalization (i.e., the
          converse of defunctionalization), and direct-style transformation
        (i.e., the converse of the CPS transformation), ending with a
        reduction-free normalization function of the kind usually crafted by
        hand. We treat in detail four simple examples: calculating arithmetic
        expressions, recognizing Dyck words, normalizing lambda-terms with
        explicit substitutions and call/cc, and flattening binary trees.",
  isbn="978-3-642-04652-0",
  doi="10.1007/978-3-642-04652-0_3",
  url="https://doi.org/10.1007/978-3-642-04652-0_3"
}
